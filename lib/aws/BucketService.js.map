{"version":3,"sources":["../../src/aws/BucketService.js"],"names":["fs","require","path","S3Key","AbstractService","UploadService","filename","value","join","plugin","getBucketLayersPath","test","process","platform","replace","log","params","Bucket","bucketName","Key","zipFileKeyName","Body","createReadStream","getPathZipFileName","provider","request","then","result","e","console","message","exit","body","file","getStream","keyPath","getKey","toString","dependenciesPath","settings","dependenceFilename","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\nconst S3Key = require('./S3Key');\nconst AbstractService = require('../AbstractService');\n\nclass UploadService extends AbstractService {\n  keyPath(filename) {\n    let value = path.join(this.plugin.getBucketLayersPath(), filename);\n    if (/^win/.test(process.platform)) {\n      value = value.replace(/\\\\/g, '/');\n    }\n    return value;\n  }\n\n  async uploadZipFile() {\n    this.plugin.log('Uploading layer package...');\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.zipFileKeyName,\n      Body: fs.createReadStream(this.plugin.getPathZipFileName())\n    };\n\n    return this.provider.request('S3', 'putObject', params)\n      .then((result) => {\n        this.plugin.log('OK...');\n        return result;\n      })\n      .catch(e => {\n        console.log(e.message);\n        process.exit(1);\n      });\n  }\n\n  async putFile(filename, body) {\n    const file = new S3Key(filename);\n    this.plugin.log(`Uploading remote ${filename}...`);\n\n    let Body = body;\n\n    if (!body) {\n      Body = file.getStream();\n    }\n\n    const params = {\n      Body,\n      Bucket: this.bucketName,\n      Key: this.keyPath(file.getKey())\n    };\n\n    return this.provider.request('S3', 'putObject', params)\n      .then((result) => {\n        this.plugin.log('OK...');\n        return result;\n      })\n      .catch(e => {\n        console.log(e.message);\n        process.exit(1);\n      });\n  }\n\n  async getFile(filename) {\n    const file = new S3Key(filename);\n    this.plugin.log(`Downloading ${file.getKey()} from bucket...`);\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.keyPath(file.getKey())\n    };\n\n    return this.provider.request('S3', 'getObject', params)\n      .then((result) => result.Body.toString())\n      .catch(() => {\n        this.plugin.log(`${filename} does not exists at bucket...`);\n        return null;\n      });\n  }\n\n  async uploadDependencesFile() {\n    const { dependenciesPath } = this.plugin.settings;\n\n    this.plugin.log(`Uploading remote ${dependenciesPath}...`);\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.dependenceFilename,\n      Body: fs.createReadStream(this.plugin.settings.dependenciesPath)\n    };\n\n    return this.provider.request('S3', 'putObject', params)\n      .then((result) => {\n        this.plugin.log('OK...');\n        return result;\n      })\n      .catch(e => {\n        console.log(e.message);\n        process.exit(1);\n      });\n  }\n\n  async downloadDependencesFile() {\n    const { dependenciesPath } = this.plugin.settings;\n    this.plugin.log(`Downloading ${dependenciesPath} from bucket...`);\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.dependenceFilename\n    };\n\n    return this.provider.request('S3', 'getObject', params)\n      .then((result) => result.Body.toString())\n      .catch(() => {\n        this.plugin.log(`${dependenciesPath} does not exists at bucket...`);\n        return null;\n      });\n  }\n}\n\nmodule.exports = UploadService;\n"],"file":"BucketService.js"}