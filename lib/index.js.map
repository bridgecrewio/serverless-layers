{"version":3,"sources":["../src/index.js"],"names":["BbPromise","require","path","slugify","chalk","semver","Runtimes","LayersService","BucketService","CloudFormationService","ZipService","LocalFolders","Dependencies","ServerlessLayersConfig","ServerlessLayers","serverless","options","cacheObject","initialized","slsLayersConfig","hooks","bind","then","init","deployLayers","finalizeDeploy","cleanUpAllLayers","provider","getProvider","service","region","getRegion","log","main","version","getVersion","lt","process","exit","runtimes","settings","getSettings","cliOpts","layerName","currentSettings","enabledFuncs","functions","deploySingle","indexOf","logGroup","initServices","console","arn","warn","cleanUpLayers","currentLayerName","zipService","dependencies","localFolders","layersService","bucketService","cloudFormationService","inboundSetting","forceInstall","dependencyInstall","compileDir","customInstallationCommand","layersDeploymentBucket","deploymentBucket","getDefaultSettings","inboundSettings","custom","Array","isArray","forEach","Object","keys","mergeCommonSettings","hasSettingsVerified","localDir","manifest","JSON","stringify","getFile","remoteSettings","putFile","artifact","relateLayerWithFunctions","hasSettingsChanges","hasFoldersChanges","hasDepsChanges","hasDependenciesChanges","hasZipChanged","hasCustomHashChanged","hashCustomHashChanged","verifyChanges","some","x","mergePackageOptions","getLayerArn","existentLayerArn","skipInstallation","inverse","green","logArn","install","copyFolders","shouldUseLayersArtifactory","uploadZipFile","publishVersion","getDepsPath","dependenciesLockPath","LayerVersionArn","stackName","getStackName","runtimeDir","lower","replacement","naming","Error","join","cwd","getLayerName","serviceStage","stage","deploymentPrefix","getDeploymentPrefix","replace","layersArn","getOutputs","outputs","logicalId","getOutputLogicalId","find","OutputKey","OutputValue","getLambdaLayerOutputLogicalId","packageExclude","pkg","opts","individually","excludeDevDependencies","exclude","excludeFile","hasRule","push","layerArn","funcs","funcName","isEnabled","layers","from","Set","magenta","bold","resources","Outputs","outputName","assign","Value","Export","Name","localPackage","map","lambdaFunc","length","currentLayerARN","msg","signal","greenBright","white","cli","yellowBright","red","pattern","name","formated","text","Ref","String","module","exports"],"mappings":"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","sourcesContent":["const BbPromise = require('bluebird');\nconst path = require('path');\nconst slugify = require('slugify');\nconst chalk = require('chalk');\nconst semver = require('semver');\nconst Runtimes = require('./runtimes');\nconst LayersService = require('./aws/LayersService');\nconst BucketService = require('./aws/BucketService');\nconst CloudFormationService = require('./aws/CloudFormationService');\nconst ZipService = require('./package/ZipService');\nconst LocalFolders = require('./package/LocalFolders');\nconst Dependencies = require('./package/Dependencies');\nconst { ServerlessLayersConfig } = require('./config/ServerlessLayersConfig');\n\nclass ServerlessLayers {\n  constructor(serverless, options) {\n    this.cacheObject = {};\n    this.options = options;\n    this.serverless = serverless;\n    this.initialized = false;\n    this.slsLayersConfig = new ServerlessLayersConfig(options);\n\n    // hooks\n    this.hooks = {\n      'before:package:function:package': () => BbPromise.bind(this)\n        .then(() => {\n          return this.init()\n            .then(() => this.deployLayers());\n        }),\n      'before:package:initialize': () => BbPromise.bind(this)\n        .then(() => {\n          return this.init()\n            .then(() => this.deployLayers());\n        }),\n      'aws:info:displayLayers': () => BbPromise.bind(this)\n        .then(() => this.init())\n        .then(() => this.finalizeDeploy()),\n      'after:deploy:function:deploy': () => BbPromise.bind(this)\n        .then(() => this.init())\n        .then(() => this.finalizeDeploy()),\n      'plugin:uninstall:uninstall': () => BbPromise.bind(this)\n        .then(() => {\n          return this.init()\n            .then(() => this.cleanUpAllLayers());\n        }),\n      'remove:remove': () => BbPromise.bind(this)\n        .then(() => {\n          return this.init()\n            .then(() => this.cleanUpAllLayers());\n        })\n    };\n  }\n\n  async init() {\n    if (this.initialized) {\n      return;\n    }\n\n    this.provider = this.serverless.getProvider('aws');\n    this.service = this.serverless.service;\n    this.options.region = this.provider.getRegion();\n\n    // bindings\n    this.log = this.log.bind(this);\n    this.main = this.main.bind(this);\n\n    const version = this.serverless.getVersion();\n\n    if (semver.lt(version, '1.34.0')) {\n      this.log(`Error: Please install serverless >= 1.34.0 (current ${this.serverless.getVersion()})`);\n      process.exit(1);\n    }\n  }\n\n  async deployLayers() {\n    this.runtimes = new Runtimes(this);\n    const settings = this.getSettings();\n\n    const cliOpts = this.provider.options;\n\n    for (const layerName in settings) {\n      const currentSettings = settings[layerName];\n      const enabledFuncs = currentSettings.functions;\n\n      // deploying a single function\n      const deploySingle = !!(cliOpts.function && enabledFuncs);\n\n      // skip layers that is not related with specified function\n      if (deploySingle && enabledFuncs.indexOf(cliOpts.function) === -1) {\n        continue;\n      }\n\n      this.logGroup(layerName);\n      await this.initServices(layerName, currentSettings);\n      await this.main();\n    }\n\n    console.log('\\n');\n  }\n\n  async cleanUpAllLayers() {\n    this.runtimes = new Runtimes(this);\n    const settings = this.getSettings();\n    for (const layerName in settings) {\n      const currentSettings = settings[layerName];\n      this.logGroup(layerName);\n\n      if (currentSettings.arn) {\n        this.warn(` (skipped) arn: ${currentSettings.arn}`);\n        continue;\n      }\n\n      await this.initServices(layerName, currentSettings);\n      await this.cleanUpLayers();\n    }\n  }\n\n  async initServices(layerName, settings) {\n    this.currentLayerName = layerName;\n    this.settings = settings;\n    this.zipService = new ZipService(this);\n    this.dependencies = new Dependencies(this);\n    this.localFolders = new LocalFolders(this);\n    this.layersService = new LayersService(this);\n    this.bucketService = new BucketService(this);\n    this.cloudFormationService = new CloudFormationService(this);\n    this.initialized = true;\n  }\n\n  mergeCommonSettings(inboundSetting) {\n    return {\n      path: '.',\n      functions: null,\n      forceInstall: false,\n      dependencyInstall: true,\n      compileDir: '.serverless',\n      customInstallationCommand: null,\n      layersDeploymentBucket: this.service.provider.deploymentBucket,\n      ...this.runtimes.getDefaultSettings(inboundSetting)\n    };\n  }\n\n  getSettings() {\n    const inboundSettings = (this.serverless.service.custom || {})[\n      'serverless-layers'\n    ];\n\n    if (Array.isArray(inboundSettings)) {\n      const settings = {};\n      inboundSettings.forEach(inboundSetting => {\n        const layerName = Object.keys(inboundSetting)[0];\n        settings[layerName] = this.mergeCommonSettings(inboundSetting[layerName]);\n      });\n      return settings;\n    }\n\n    return {\n      default: this.mergeCommonSettings(inboundSettings)\n    };\n  }\n\n  hasSettingsChanges() {\n    // don't check settings changes twice\n    if (this.hasSettingsVerified) {\n      return false;\n    }\n\n    // by pass settings\n    if (!this.settings.localDir) {\n      return false;\n    }\n\n    const manifest = '__meta__/manifest-settings.json';\n    const currentSettings = JSON.stringify(this.settings);\n\n    // settings checked\n    this.hasSettingsVerified = true;\n\n    return this.bucketService.getFile(manifest).then((remoteSettings) => {\n      // create and return true (changed)\n      if (!remoteSettings) {\n        return this.bucketService.putFile(manifest, currentSettings)\n          .then(() => true);\n      }\n\n      if (remoteSettings !== currentSettings) {\n        return this.bucketService.putFile(manifest, currentSettings)\n          .then(() => true);\n      }\n\n      return false;\n    });\n  }\n\n  async hasCustomHashChanged() {\n    // if (!this.settings.customHash) {\n    //   return false;\n    // }\n    //\n    // const hashFileName = 'customHash.json';\n    // const remoteHashFile = await this.bucketService.getFile(hashFileName);\n    //\n    // if (!remoteHashFile) {\n    //   this.log('no previous custom hash found, putting new remote hash');\n    //   await this.bucketService.putFile(\n    //     hashFileName, JSON.stringify({ hash: this.settings.customHash })\n    //   );\n    //   return true;\n    // }\n    //\n    // const { hash: remoteHash } = JSON.parse(remoteHashFile);\n    // if (remoteHash === this.settings.customHash) {\n    //   return false;\n    // }\n\n    // TODO - bug - put file just after flow succeed\n    // await this.bucketService.putFile(\n    //   hashFileName, JSON.stringify({ hash: this.settings.customHash })\n    // );\n    this.log('identified custom hash change!');\n    return true;\n  }\n\n  async main() {\n    const {\n      arn,\n      localDir,\n      artifact,\n      forceInstall,\n      dependencyInstall\n    } = this.settings;\n\n    // static ARN\n    if (arn) {\n      this.relateLayerWithFunctions(arn);\n      return;\n    }\n\n    await this.runtimes.init();\n    await this.dependencies.init();\n    await this.localFolders.init();\n\n    // it avoids issues if user changes some configuration\n    // which will not be applied till dependencies be changed\n    const hasSettingsChanges = await this.hasSettingsChanges();\n\n    // check if directories content has changed\n    // comparing hash md5 remote with local folder\n    let hasFoldersChanges = false;\n    if (localDir) {\n      hasFoldersChanges = await this.localFolders.hasFoldersChanges();\n    }\n\n    // check if dependencies has changed comparing\n    // remote package.json with local one\n    let hasDepsChanges = false;\n    if (dependencyInstall) {\n      hasDepsChanges = await this.runtimes.hasDependenciesChanges();\n    }\n\n    let hasZipChanged = false;\n    if (artifact) {\n      hasZipChanged = await this.zipService.hasZipChanged();\n    }\n\n    const hashCustomHashChanged = await this.hasCustomHashChanged();\n\n    // It checks if something has changed\n    const verifyChanges = [\n      hasZipChanged,\n      hasDepsChanges,\n      hasFoldersChanges,\n      hasSettingsChanges,\n      hashCustomHashChanged\n    ].some(x => x === true);\n\n    // merge package default options\n    this.mergePackageOptions();\n\n    // It returns the layer arn if exists.\n    const existentLayerArn = await this.getLayerArn();\n\n    // It improves readability\n    const skipInstallation = (\n      !verifyChanges && !forceInstall && existentLayerArn\n    );\n\n    /**\n     * If no changes, and layer arn available,\n     * it doesn't require re-installing dependencies.\n     */\n    if (skipInstallation) {\n      this.log(`${chalk.inverse.green(' No changes ')}! Using same layer arn: ${this.logArn(existentLayerArn)}`);\n      this.relateLayerWithFunctions(existentLayerArn);\n      return;\n    }\n\n    // ENABLED by default\n    if (dependencyInstall && !artifact) {\n      await this.dependencies.install();\n    }\n\n    if (localDir && !artifact) {\n      await this.localFolders.copyFolders();\n    }\n\n    if (this.slsLayersConfig.shouldUseLayersArtifactory) {\n\n    }\n\n    await this.zipService.package();\n    await this.bucketService.uploadZipFile();\n    const version = await this.layersService.publishVersion();\n    await this.bucketService.putFile(this.dependencies.getDepsPath());\n    await this.bucketService.putFile(this.settings.dependenciesLockPath);\n\n    this.relateLayerWithFunctions(version.LayerVersionArn);\n  }\n\n  getLayerName() {\n    const stackName = this.getStackName();\n    const { runtimeDir } = this.settings;\n    return slugify(`${stackName}-${runtimeDir}-${this.currentLayerName}`, {\n      lower: true,\n      replacement: '-'\n    });\n  }\n\n  getStackName() {\n    return this.provider.naming.getStackName();\n  }\n\n  getBucketName() {\n    if (!this.settings.layersDeploymentBucket) {\n      throw new Error(\n        'Please, you should specify \"deploymentBucket\" or \"layersDeploymentBucket\" option for this plugin!\\n'\n      );\n    }\n    return this.settings.layersDeploymentBucket;\n  }\n\n  getPathZipFileName() {\n    if (this.settings.artifact) {\n      return `${path.join(process.cwd(), this.settings.artifact)}`;\n    }\n    return `${path.join(process.cwd(), this.settings.compileDir, this.getLayerName())}.zip`;\n  }\n\n  getBucketLayersPath() {\n    const serviceStage = `${this.serverless.service.service}/${this.options.stage}`;\n\n    let deploymentPrefix = 'serverless';\n    if (this.provider.getDeploymentPrefix) {\n      deploymentPrefix = this.provider.getDeploymentPrefix();\n    }\n\n    return path.join(\n      deploymentPrefix,\n      serviceStage,\n      'layers'\n    ).replace(/\\\\/g, '/');\n  }\n\n  async getLayerArn() {\n    if (!this.cacheObject.layersArn) {\n      this.cacheObject.layersArn = {};\n    }\n\n    // returns cached arn\n    if (this.cacheObject.layersArn[this.currentLayerName]) {\n      return this.cacheObject.layersArn[this.currentLayerName];\n    }\n\n    const outputs = await this.cloudFormationService.getOutputs();\n\n    if (!outputs) return null;\n\n    const logicalId = this.getOutputLogicalId();\n\n    const arn = (outputs.find(x => x.OutputKey === logicalId) || {}).OutputValue;\n\n    // cache arn\n    this.cacheObject.layersArn[this.currentLayerName] = arn;\n\n    return arn;\n  }\n\n  getOutputLogicalId() {\n    return this.provider.naming.getLambdaLayerOutputLogicalId(this.getLayerName());\n  }\n\n  mergePackageOptions() {\n    const { packageExclude, artifact } = this.settings;\n    const pkg = this.service.package;\n\n    const opts = {\n      individually: false,\n      excludeDevDependencies: false,\n      exclude: []\n    };\n\n    this.service.package = { ...opts, ...pkg };\n\n    for (const excludeFile of packageExclude) {\n      const hasRule = (this.service.package.exclude || '').indexOf(excludeFile);\n      if (hasRule === -1) {\n        this.service.package.exclude.push(excludeFile);\n      }\n    }\n\n    if (artifact) {\n      this.service.package.exclude.push(artifact);\n    }\n  }\n\n  relateLayerWithFunctions(layerArn) {\n    this.log('Adding layers...');\n    const { functions } = this.service;\n    const funcs = this.settings.functions;\n    const cliOpts = this.provider.options;\n\n    Object.keys(functions).forEach(funcName => {\n      if (cliOpts.function && cliOpts.function !== funcName) {\n        return;\n      }\n\n      let isEnabled = !funcs;\n\n      if (Array.isArray(funcs) && funcs.indexOf(funcName) !== -1) {\n        isEnabled = true;\n      }\n\n      if (isEnabled) {\n        functions[funcName].layers = functions[funcName].layers || [];\n        functions[funcName].layers.push(layerArn);\n        functions[funcName].layers = Array.from(new Set(functions[funcName].layers));\n        this.log(`function.${chalk.magenta.bold(funcName)} - ${this.logArn(layerArn)}`, ' ✓');\n      } else {\n        this.warn(`(Skipped) function.${chalk.magenta.bold(funcName)}`, ' x');\n      }\n    });\n\n    this.service.resources = this.service.resources || {};\n    this.service.resources.Outputs = this.service.resources.Outputs || {};\n\n    const outputName = this.getOutputLogicalId();\n\n    Object.assign(this.service.resources.Outputs, {\n      [outputName]: {\n        Value: layerArn,\n        Export: {\n          Name: outputName\n        }\n      }\n    });\n  }\n\n  getDependenciesList() {\n    return Object.keys((this.localPackage.dependencies || [])).map(x => (\n      `${x}@${this.localPackage.dependencies[x]}`\n    ));\n  }\n\n  async finalizeDeploy() {\n    const cliOpts = this.provider.options;\n    this.logGroup('Layers Info');\n    Object.keys(this.service.functions).forEach(funcName => {\n      const lambdaFunc = this.service.functions[funcName];\n      const layers = lambdaFunc.layers || [];\n\n      if (!cliOpts.function && layers.length === 0) {\n        this.warn(`(skipped) function.${chalk.magenta.bold(funcName)}`);\n        return;\n      }\n\n      layers.forEach((currentLayerARN) => {\n        if (cliOpts.function && cliOpts.function === funcName) {\n          this.log(`function.${chalk.magenta.bold(funcName)} = layers.${this.logArn(currentLayerARN)}`);\n          return;\n        }\n        this.log(`function.${chalk.magenta.bold(funcName)} = layers.${this.logArn(currentLayerARN)}`);\n      });\n    });\n    console.log('\\n');\n  }\n\n  log(msg, signal = ' ○') {\n    console.log('...' + `${chalk.greenBright.bold(signal)} ${chalk.white(msg)}`);\n  }\n\n  logGroup(msg) {\n    console.log('\\n');\n    this.serverless.cli.log(`[ LayersPlugin ]: ${chalk.magenta.bold('=>')} ${chalk.greenBright.bold(msg)}`);\n  }\n\n  warn(msg, signal = ' ∅') {\n    console.log(`...${chalk.yellowBright(`${chalk.yellowBright.bold(signal)} ${msg}`)}`);\n  }\n\n  error(msg, signal = ' ⊗') {\n    console.log(`...${chalk.red(`${signal} ${chalk.white.bold(msg)}`)}`);\n  }\n\n  cleanUpLayers() {\n    return this.layersService.cleanUpLayers();\n  }\n\n  logArn(arn) {\n    const pattern = /arn:aws:lambda:([^:]+):([0-9]+):layer:([^:]+):([0-9]+)/g;\n    const region = chalk.bold('$1');\n    const name = chalk.magenta('$3');\n    const formated = chalk.white(`arn:aws:lambda:${region}:*********:${name}:$4`);\n\n    let text = '';\n    switch (typeof arn) {\n      case 'object':\n        if (arn.Ref) {\n          text = `logicalId:[${chalk.bold('Ref')}=`;\n          text += `${chalk.magenta(arn.Ref)}]`;\n        }\n        break;\n      case 'string':\n        text = arn;\n        break;\n      default:\n        text = String(arn);\n        break;\n    }\n    return text.replace(pattern, formated);\n  }\n}\n\nmodule.exports = ServerlessLayers;\n"],"file":"index.js"}