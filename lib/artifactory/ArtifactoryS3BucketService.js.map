{"version":3,"sources":["../../src/artifactory/ArtifactoryS3BucketService.js"],"names":["fs","require","ArtifactoryS3BucketService","serverlessLayersConfig","s3Client","AWS","S3","region","artifactoryRegion","credentials","accessKeyId","s3ArtifactoryAccessKeyId","secretAccessKey","s3ArtifactorySecretAccessKey","sessionToken","s3ArtifactorySessionToken","console","debug","artifactoryJsonMappingKey","artifactoryBucketName","config","endpoint","params","Bucket","Key","getObject","promise","response","JSON","parse","Body","toString","layerInfo","layerArn","code","undefined","error","generateHashMappingFileContent","ContentType","putObject","stringify","packagesHash","artifactoryHashKey","tempArtifactoryZipFileName","artifactoryZipKey","createReadStream","zipFile"],"mappings":"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","sourcesContent":["import * as AWS from 'aws-sdk';\n\nconst fs = require('fs');\n\nexport class ArtifactoryS3BucketService {\n  constructor(serverlessLayersConfig) {\n    this.serverlessLayersConfig = serverlessLayersConfig;\n    this.s3Client = {};\n  }\n\n  initService() {\n    this.s3Client = new AWS.S3({\n      region: this.serverlessLayersConfig.artifactoryRegion,\n      credentials: {\n        accessKeyId: this.serverlessLayersConfig.s3ArtifactoryAccessKeyId,\n        secretAccessKey: this.serverlessLayersConfig.s3ArtifactorySecretAccessKey,\n        sessionToken: this.serverlessLayersConfig.s3ArtifactorySessionToken\n      }\n    });\n  }\n\n  async downloadLayerHashMappingJsonFile() {\n    console.debug(`[ LayersPlugin - Artifacts ]: going to download hash mapping file - key ${this.serverlessLayersConfig.artifactoryJsonMappingKey} from bucket ${this.serverlessLayersConfig.artifactoryBucketName} in region ${this.s3Client.config.region} and endpoint ${this.s3Client.config.endpoint}`);\n\n    try {\n      const params = {\n        Bucket: this.serverlessLayersConfig.artifactoryBucketName,\n        Key: this.serverlessLayersConfig.artifactoryJsonMappingKey\n      };\n\n      const response = await this.s3Client.getObject(params).promise();\n\n      return JSON.parse(response.Body.toString()).layerInfo.layerArn;\n    } catch (e) {\n      if (e.code === 'NoSuchKey') {\n        console.debug(`[ LayersPlugin - Artifacts ]: key ${this.serverlessLayersConfig.artifactoryJsonMappingKey} was not found in bucket ${this.serverlessLayersConfig.artifactoryBucketName}`);\n        return undefined;\n      }\n\n      console.error(`[ LayersPlugin - Artifacts ]: could not query bucket ${this.serverlessLayersConfig.artifactoryBucketName} for key ${this.serverlessLayersConfig.artifactoryJsonMappingKey}`, e);\n      throw e;\n    }\n  }\n\n  async uploadLayerHashMappingFile(layerArn) {\n    console.debug(`[ LayersPlugin - Artifacts ]: going to upload hash mapping file - key ${this.serverlessLayersConfig.artifactoryJsonMappingKey} for bucket ${this.serverlessLayersConfig.artifactoryBucketName}`);\n\n    const params = {\n      Bucket: this.serverlessLayersConfig.artifactoryBucketName,\n      Key: this.serverlessLayersConfig.artifactoryJsonMappingKey,\n      Body: this.generateHashMappingFileContent(layerArn),\n      ContentType: 'application/zip'\n    };\n\n    const response = await this.s3Client.putObject(params).promise();\n\n    console.debug(`[ LayersPlugin - Artifacts ]: file ${this.serverlessLayersConfig.artifactoryJsonMappingKey} was successfully uploaded to ${this.serverlessLayersConfig.artifactoryBucketName}, response is: ${JSON.stringify(response)}`);\n  }\n\n  generateHashMappingFileContent(layerArn) {\n    return JSON.stringify({\n      layerInfo: {\n        packagesHash: this.serverlessLayersConfig.artifactoryHashKey,\n        layerArn\n      }\n    });\n  }\n\n  async uploadLayerZipFile() {\n    console.debug(`[ LayersPlugin - Artifacts ]: going to upload file ${this.serverlessLayersConfig.tempArtifactoryZipFileName} to ${this.serverlessLayersConfig.artifactoryBucketName} bucket for key ${this.serverlessLayersConfig.artifactoryZipKey}`);\n\n    const zipFile = await fs.createReadStream((this.serverlessLayersConfig.tempArtifactoryZipFileName));\n\n    const params = {\n      Bucket: this.serverlessLayersConfig.artifactoryBucketName,\n      Key: this.serverlessLayersConfig.artifactoryZipKey,\n      Body: zipFile,\n      ContentType: 'application/zip'\n    };\n    const response = await this.s3Client.putObject(params).promise();\n\n    console.debug(`[ LayersPlugin - Artifacts ]: file ${this.serverlessLayersConfig.artifactoryZipKey} was uploaded to ${this.serverlessLayersConfig.artifactoryBucketName}, response is: ${JSON.stringify(response)}`);\n  }\n}\n"],"file":"ArtifactoryS3BucketService.js"}