{"version":3,"sources":["../../src/artifactory/ArtifactoryLayerService.js"],"names":["ArtifactoryLayerService","serverlessLayersConfig","compatibleRuntimes","lambdaLayerClient","AWS","Lambda","region","artifactoryRegion","credentials","accessKeyId","s3ArtifactoryAccessKeyId","secretAccessKey","s3ArtifactorySecretAccessKey","sessionToken","s3ArtifactorySessionToken","console","log","artifactoryBucketName","artifactoryZipKey","artifactoryLayerName","params","Content","S3Bucket","S3Key","LayerName","Description","CompatibleRuntimes","publishLayerVersion","promise","response","JSON","stringify","addLayerVersionPermissionForAwsAccountInTheSameRegion","LayerArn","Version","LayerVersionArn","layerArn","versionNumber","addLayerVersionPermission","VersionNumber","StatementId","Action","Principal","OrganizationId","organizationId"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;IAEaA,uB;AACX,mCAAYC,sBAAZ,EAAoCC,kBAApC,EAAwD;AAAA;AACtD,SAAKD,sBAAL,GAA8BA,sBAA9B;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACD;;;;kCAEa;AACZ,WAAKC,iBAAL,GAAyB,IAAIC,GAAG,CAACC,MAAR,CAAe;AACtCC,QAAAA,MAAM,EAAE,KAAKL,sBAAL,CAA4BM,iBADE;AAEtCC,QAAAA,WAAW,EAAE;AACXC,UAAAA,WAAW,EAAE,KAAKR,sBAAL,CAA4BS,wBAD9B;AAEXC,UAAAA,eAAe,EAAE,KAAKV,sBAAL,CAA4BW,4BAFlC;AAGXC,UAAAA,YAAY,EAAE,KAAKZ,sBAAL,CAA4Ba;AAH/B;AAFyB,OAAf,CAAzB;AAQD;;;;;;;;;;AAGCC,gBAAAA,OAAO,CAACC,GAAR,qHAAyH,KAAKf,sBAAL,CAA4BgB,qBAArJ,6BAA6L,KAAKhB,sBAAL,CAA4BiB,iBAAzN,6BAA6P,KAAKjB,sBAAL,CAA4BkB,oBAAzR,yCAA4U,KAAKjB,kBAAjV;AAEMkB,gBAAAA,M,GAAS;AACbC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,QAAQ,EAAE,KAAKrB,sBAAL,CAA4BgB,qBAD/B;AAEPM,oBAAAA,KAAK,EAAE,KAAKtB,sBAAL,CAA4BiB;AAF5B,mBADI;AAKbM,kBAAAA,SAAS,EAAE,KAAKvB,sBAAL,CAA4BkB,oBAL1B;AAMbM,kBAAAA,WAAW,EAAE,sDANA;AAObC,kBAAAA,kBAAkB,EAAE,KAAKxB;AAPZ,iB;;uBAUQ,KAAKC,iBAAL,CAAuBwB,mBAAvB,CAA2CP,MAA3C,EAAmDQ,OAAnD,E;;;AAAjBC,gBAAAA,Q;AACNd,gBAAAA,OAAO,CAACC,GAAR,oFAAwFc,IAAI,CAACC,SAAL,CAAeF,QAAf,CAAxF;;uBAEM,KAAKG,qDAAL,CAA2DH,QAAQ,CAACI,QAApE,EAA8EJ,QAAQ,CAACK,OAAvF,C;;;iDAECL,QAAQ,CAACM,e;;;;;;;;;;;;;;;;;;;mKAG0CC,Q,EAAUC,a;;;;;;AACpEtB,gBAAAA,OAAO,CAACC,GAAR,8FAAkGoB,QAAlG,iCAAiIC,aAAjI,yBAA6J,KAAKpC,sBAAL,CAA4BM,iBAAzL;;uBAEuB,KAAKJ,iBAAL,CAAuBmC,yBAAvB,CAAiD;AACtEd,kBAAAA,SAAS,EAAEY,QAD2D;AAEtEG,kBAAAA,aAAa,EAAEF,aAFuD;AAGtEG,kBAAAA,WAAW,yCAAkC,KAAKvC,sBAAL,CAA4BM,iBAA9D,CAH2D;AAItEkC,kBAAAA,MAAM,EAAE,wBAJ8D;AAKtEC,kBAAAA,SAAS,EAAE,GAL2D;AAMtEC,kBAAAA,cAAc,EAAE,KAAK1C,sBAAL,CAA4B2C;AAN0B,iBAAjD,EAOpBhB,OAPoB,E;;;AAAjBC,gBAAAA,Q;AASNd,gBAAAA,OAAO,CAACC,GAAR,4EAAgFoB,QAAhF,iBAA+F,KAAKnC,sBAAL,CAA4BM,iBAA3H,6BAA+JuB,IAAI,CAACC,SAAL,CAAeF,QAAf,CAA/J","sourcesContent":["import * as AWS from 'aws-sdk';\n\nexport class ArtifactoryLayerService {\n  constructor(serverlessLayersConfig, compatibleRuntimes) {\n    this.serverlessLayersConfig = serverlessLayersConfig;\n    this.compatibleRuntimes = compatibleRuntimes;\n  }\n\n  initService() {\n    this.lambdaLayerClient = new AWS.Lambda({\n      region: this.serverlessLayersConfig.artifactoryRegion,\n      credentials: {\n        accessKeyId: this.serverlessLayersConfig.s3ArtifactoryAccessKeyId,\n        secretAccessKey: this.serverlessLayersConfig.s3ArtifactorySecretAccessKey,\n        sessionToken: this.serverlessLayersConfig.s3ArtifactorySessionToken\n      }\n    });\n  }\n\n  async publishLayerFromArtifactory() {\n    console.log(`[ LayersPlugin - Artifacts ]: going to publish new layer version from artifactory, layer zip is in bucket ${this.serverlessLayersConfig.artifactoryBucketName} and zip key is ${this.serverlessLayersConfig.artifactoryZipKey}, layer name is ${this.serverlessLayersConfig.artifactoryLayerName} for the following runtimes ${this.compatibleRuntimes}`);\n\n    const params = {\n      Content: {\n        S3Bucket: this.serverlessLayersConfig.artifactoryBucketName,\n        S3Key: this.serverlessLayersConfig.artifactoryZipKey\n      },\n      LayerName: this.serverlessLayersConfig.artifactoryLayerName,\n      Description: 'created by serverless-layers plugin from artifactory',\n      CompatibleRuntimes: this.compatibleRuntimes\n    };\n\n    const response = await this.lambdaLayerClient.publishLayerVersion(params).promise();\n    console.log(`[ LayersPlugin - Artifacts ]: new layer version published, response is - ${JSON.stringify(response)}`);\n\n    await this.addLayerVersionPermissionForAwsAccountInTheSameRegion(response.LayerArn, response.Version);\n\n    return response.LayerVersionArn;\n  }\n\n  async addLayerVersionPermissionForAwsAccountInTheSameRegion(layerArn, versionNumber) {\n    console.log(`[ LayersPlugin - Artifacts ]: going to add layer version permissions for layer arn ${layerArn} and version number ${versionNumber} for region ${this.serverlessLayersConfig.artifactoryRegion}`);\n\n    const response = await this.lambdaLayerClient.addLayerVersionPermission({\n      LayerName: layerArn,\n      VersionNumber: versionNumber,\n      StatementId: `layer-version-permission-for-${this.serverlessLayersConfig.artifactoryRegion}`,\n      Action: 'lambda:GetLayerVersion',\n      Principal: '*',\n      OrganizationId: this.serverlessLayersConfig.organizationId\n    }).promise();\n\n    console.log(`[ LayersPlugin - Artifacts ]: new permission was added for layer ${layerArn} in ${this.serverlessLayersConfig.artifactoryRegion}, response is - ${JSON.stringify(response)}`);\n  }\n}\n"],"file":"ArtifactoryLayerService.js"}